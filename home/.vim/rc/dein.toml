[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'roxma/nvim-yarp'
if = ''' !has('nvim') '''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = ''' !has('nvim') '''

# なんか入力が遅かったので一旦コメントアウト
# [[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_source = '''
call denite#custom#option('default', 'prompt', '>')
call denite#custom#var('file_rec', 'command',
      \ ['rg', '--files', '--glob', '!.git', '-g', '!node_modules',
      \  '-g', '!vendor/bundle', '-g', '!tmp', '-g', '!log' ])
call denite#custom#source(
      \ 'file_rec', 'sorters', ['sorter_sublime'])
call denite#custom#map(
      \ 'insert',
      \ '<C-j>',
      \ '<denite:move_to_next_line>',
      \ 'noremap'
      \)
call denite#custom#map(
      \ 'insert',
      \ '<C-k>',
      \ '<denite:move_to_previous_line>',
      \ 'noremap'
      \)
call denite#custom#source(
      \ 'file_mru', 'matchers', ['matcher_fuzzy', 'matcher_cpsm'])
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts',
      \ ['--vimgrep', '--no-heading'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])
call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
      \ ['.git/', '.ropeproject/', '__pycache__/',
      \  'venv/', 'images/', '*.min.*', 'img/', 'fonts/',
      \  'bundle/', 'node_modules/'])
'''
hook_add = '''
nnoremap <silent> <C-p> :<C-u>Denite file_rec<CR>

nnoremap [denite] <Nop>

nmap ,u [denite]
nnoremap <silent> [denite]g :<C-u>Denite grep<CR>
nnoremap <silent> [denite]b :<C-u>Denite buffer<CR>
nnoremap <silent> [denite]m :<C-u>Denite file_mru<CR>
" nnoremap <silent> / :<C-u>Denite -buffer-name=search -auto-resize line<CR>

nmap [denite]w [denite-curwor]
nnoremap <silent> [denite-curwor]g :<C-u>DeniteCursorWord grep<CR>

nmap [denite]r [denite-rails]
nnoremap <silent> [denite-rails]aj :<C-u>Denite file_rec:app/assets/javascripts/<CR>
nnoremap <silent> [denite-rails]ap :<C-u>Denite file_rec:app/<CR>
nnoremap <silent> [denite-rails]as :<C-u>Denite file_rec:app/assets/stylesheets/<CR>
nnoremap <silent> [denite-rails]md :<C-u>Denite file_rec:app/models/<CR>
nnoremap <silent> [denite-rails]cl :<C-u>Denite file_rec:app/controllers/<CR>
nnoremap <silent> [denite-rails]co :<C-u>Denite file_rec:config/<CR>
nnoremap <silent> [denite-rails]db :<C-u>Denite file_rec:db/<CR>
nnoremap <silent> [denite-rails]he :<C-u>Denite file_rec:app/helpers/<CR>
nnoremap <silent> [denite-rails]ja :<C-u>Denite file_rec:app/javascript/<CR>
nnoremap <silent> [denite-rails]jo :<C-u>Denite file_rec:app/jobs/<CR>
nnoremap <silent> [denite-rails]li :<C-u>Denite file_rec:lib/<CR>
nnoremap <silent> [denite-rails]sr :<C-u>Denite file_rec:app/serializers/<CR>
nnoremap <silent> [denite-rails]vw :<C-u>Denite file_rec:app/views/<CR>
nnoremap <silent> [denite-rails]vo :<C-u>Denite file_rec:app/view_objects/<CR>
nnoremap <silent> [denite-rails]wo :<C-u>Denite file_rec:app/serializers/<CR>
'''

[[plugins]]
repo = 'altercation/vim-colors-solarized'

[[plugins]]
repo = 'kaicataldo/material.vim'

[[plugins]]
repo = 'w0ng/vim-hybrid'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
hook_add = '''
  autocmd BufWritePre * :FixWhitespace
'''

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_start_key = '<Leader><C-T>'
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent><C-e> :NERDTreeToggle<CR>
  let g:NERDTreeShowBookmarks=1
  let g:NERDTreeDirArrows=1
  nnoremap <S-n>l gt
  nnoremap <S-n>h gT
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
set laststatus=2
let g:lightline = {
        \ 'colorscheme': 'solarized',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'modified': 'LightlineModified',
        \   'readonly': 'LightlineReadonly',
        \   'fugitive': 'LightlineFugitive',
        \   'filename': 'LightlineFilename',
        \   'fileformat': 'LightlineFileformat',
        \   'filetype': 'LightlineFiletype',
        \   'fileencoding': 'LightlineFileencoding',
        \   'mode': 'LightlineMode'
        \ }
        \ }

function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
    return fugitive#head()
  else
    return ''
  endif
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'mattn/emmet-vim'
hook_source = '''
let g:user_emmet_mode='iv'
let g:user_emmet_leader_key='<C-Y>'
let g:use_emmet_complete_tag=1
let g:user_emmet_settings={
      \ 'lang' : 'ja',
      \ 'html' : {
      \   'filters' : 'html',
      \ },
      \ 'css' : {
      \   'filters' : 'fc',
      \ },
      \ 'php' : {
      \   'extends' : 'html',
      \   'filters' : 'html',
      \ },
      \}
augroup EmmitVim
  autocmd!
  autocmd FileType * let g:user_emmet_settings.indentation='               '[:&tabstop]
augroup END
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  nnoremap <silent> ,gg :<C-u>GitGutterToggle<CR>
  nnoremap <silent> ,gh :<C-u>GitGutterLineHighlightsToggle<CR>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

# [[plugins]]
# repo = 'cohama/agit.vim'

[[plugins]]
repo = 'rhysd/committia.vim'
hook_source = '''
let g:committia_min_window_width=100  " これ以下の幅では左右分割しない
let g:committia_hooks={}
function! g:committia_hooks.edit_open(info)
    " Additional settings
    setlocal spell
    " If no commit message, start with insert mode
    if a:info.vcs ==# 'git' && getline(1) ==# ''
        startinsert
    end
    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-j> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-k> <Plug>(committia-scroll-diff-up-half)
endfunction
'''

# [[plugins]]
# repo = 'gregsexton/gitv.git'

[[plugins]]
repo = 'othree/yajs.vim'
